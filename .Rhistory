if (file.exists("data/userdata/audit_outcome.csv")) {
your_data <- read.csv("data/userdata/audit_outcome.csv")
your_outcome <- sum(as.numeric(your_data[[2]]))
ggplot_audit <- ggplot_audit +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text",
x = your_outcome-1.5, y = 25,
label = "Your Score",
color = "#E4CCC0",
size = 3.5)
plotly::ggplotly(ggplot_audit)
} else {
shiny::showNotification(
"No data found for Depression & Anxiety Questionnaire.
Please make sure to finish the Questionnaire first.
The task can be found under Questionnaire Menu Tab.",
duration = 30)
plotly::ggplotly(ggplot_audit)
}
} else if(plot == "DASS") {
ggplot_dass <- ggplot(data, aes(x = DASS)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
labs(x = "Score",
y = "Count (n)") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
if (file.exists("data/userdata/dass_outcome.csv")) {
your_data <- read.csv("data/userdata/dass_outcome.csv")
your_outcome <- sum(as.numeric(your_data[[2]]))
ggplot_dass <- ggplot_dass +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text",
x = your_outcome-10.5, y = 20,
label = "Your Score",
color = "#E4CCC0",
size = 3.5)
plotly::ggplotly(ggplot_dass)
} else {
shiny::showNotification(
"No data found for Depression & Anxiety Questionnaire.
Please make sure to finish the Questionnaire first.
The task can be found under Questionnaire Menu Tab.",
duration = 30)
plotly::ggplotly(ggplot_dass)
}
}  else if(plot == "SDL") {
ggplot_sdl <- ggplot(data, aes(x = SDL_score)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
labs(x = "Score",
y = "Count (n)") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
if(file.exists("data/userdata/sdl_outcome.csv")) {
your_data <- read.csv("data/userdata/sdl_outcome.csv")
your_outcome <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
ggplot_sdl <- ggplot_sdl +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text",
x = your_outcome-450, y = 20,
label = "Your Score",
color = "#E4CCC0",
size = 3.5)
plotly::ggplotly(ggplot_sdl)
} else {
shiny::showNotification(
"No data found for Stroop Deadline Task.
Please make sure to finish the task first.
The task can be found under Experiments Menu Tab",
duration = 30)
plotly::ggplotly(ggplot_sdl)
}
}
}
build_regression_plot <- function(x, y) {
data <- read.csv("data/general_data.csv")
# your_outcome_x <- NA
# your_outcome_y <- NA
if (y == "Alcohol Use"){
yaxis <- data$AUDIT
ylabel <- "Alcohol Use Score"
if (file.exists("data/userdata/audit_outcome.csv")) {
your_data <- read.csv("data/userdata/audit_outcome.csv")
your_outcome_y <- sum(as.numeric(your_data[[2]]))
}
} else if (y == "Depression, Anxiety & Stress") {
yaxis <- data$DASS
ylabel <- "Depression, Anxiety & Stress Score"
if (file.exists("data/userdata/dass_outcome.csv")) {
your_data <- read.csv("data/userdata/dass_outcome.csv")
your_outcome_y <- sum(as.numeric(your_data[[2]]))
}
}
if (x == "Stroop Deadline") {
xaxis <- data$SDL_score
xlabel <- "Stroop Deadline Score"
if (file.exists("data/userdata/sdl_outcome.csv")) {
your_data <- read.csv("data/userdata/sdl_outcome.csv")
your_outcome_x <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
}
}
ggplot <- ggplot(data, aes(xaxis, yaxis)) +
geom_point(colour = "#bc0031") +
geom_smooth(method ="lm", colour = "#E4CCC0", fill = "#ebebec", na.rm = TRUE) +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec")) +
labs(y = ylabel,
x = xlabel)
if (exists("your_outcome_x") & exists("your_outcome_y")) {
ggplot <- ggplot +
geom_point(aes(x=your_outcome_x,y=your_outcome_y),colour="#E4CCC0") +
annotate(geom = "text",
x = your_outcome_x, y = your_outcome_y,
label = "Your Score",
color = "#E4CCC0",
size = 3.5)
}
plotly::ggplotly(ggplot)
}
App_UI <- function() {
ui <- fluidPage(
theme = bslib::bs_theme(
bg = "#1F1D21",
fg = "#ebebec",
secondary = "#bc0031",
primary = "#E4CCC0",
base_font = bslib::font_google("Prompt"),
code_font = bslib::font_google("JetBrains Mono")
),
navbarPage(
"ProjectExplicit", id = "inTabset",
tabPanel("About", value = "about_tab",
fluidRow(column(8, includeMarkdown("inst/about.md")),
column(4, "Note: For the best experience select Stroop Deadline Task.",
br(), br(),
"Digit Span, VMAC and Classic Stroop Task are for fun only.",
style = "margin-top: 80px; color: #E4CCC0"))),
navbarMenu("Experiments",
tabPanel("Classic Stroop", value = "stroop_tab",
fluidRow(column(6, includeMarkdown("inst/stroop.md")),
column(6, actionButton("start_stroop", "Start Experiment"),
align = "center", style = "margin-top: 100px;"))),
tabPanel("Stroop Deadline", value = "sdl_tab",
fluidRow(column(6, includeMarkdown("inst/sdl.md")),
column(6, actionButton("start_sdl", "Start Experiment"),
align = "center", style = "margin-top: 100px;"))),
tabPanel("Digit Span Task", value = "digit_tab",
fluidRow(column(6, includeMarkdown("inst/digit.md")),
column(6, actionButton("start_digit", "Start Experiment"),
align = "center", style = "margin-top: 100px;"))),
tabPanel("VMAC Task", value = "vmac_tab",
fluidRow(column(6, includeMarkdown("inst/vmac.md")),
column(6, actionButton("start_vmac", "Start Experiment"),
align = "center", style = "margin-top: 100px;")))
),
navbarMenu("Questionnaires",
tabPanel("Alcohol Use", value = "audit_tab",
lapply(1:8, function(i) {
build_questionnaire(i, "AUDIT_part1")
}),
lapply(9:10, function(i) {
build_questionnaire(i, "AUDIT_part2")
}),
actionButton("submit_audit", "Submit")),
tabPanel("Depression Symptoms", value = "dass_tab",
lapply(1:21, function(i) {
build_questionnaire(i, "DASS")
}),
actionButton("submit_dass", "Submit"))),
tabPanel("Your Results", value = "results_tab",
"How do you compare to the general population?",
style = "font-size:18pt",
br(), br(),
fluidRow(column(4, "Mental Health Questionnaires",
style = "font-size:14pt",
br(), br(),
"Alcohol Use",
plotlyOutput("AUDIT"),
"Depression, Anxiety & Stress",
plotlyOutput("DASS")),
column(4, "Cognitive Tasks",
style = "font-size:14pt",
br(), br(),
"Stroop Deadline",
plotlyOutput("SDL"),
plotlyOutput("Stroop"),
plotlyOutput("VMAC")),
column(4, "How are the tasks and mental health related to each other?",
style = "font-size:14pt",
column(6,
selectInput("task", "Choose a Cognitive Task",
choices = c("Stroop Deadline")),
style = "font-size:11pt"),
column(6,
selectInput("quest", "Choose a mental health Questionnaire",
choices = c("Alcohol Use", "Depression, Anxiety & Stress")),
style = "font-size:11pt"),
plotlyOutput("Correlation"))
)
),
),
htmlOutput("experiment"),
)
}
start_App()
library(ProjectExplicit)
start_App()
library(ProjectExplicit)
start_App()
library(ProjectExplicit)
start_App()
library(ProjectExplicit)
start_App()
library(testthat)
?expect_condition
devtools::test()
?rm
rm(list = ls())
devtools::test()
datawd <- getwd()
paste(datawd, "/userdata", sep="")
data <- read.csv("data/general_data.csv")
your_data <- read.csv("data/userdata/audit_outcome.csv")
general_data <- rbind(data, your_data)
general_data <- general_data %>%
full_join(your_data)
general_data <- data %>%
full_join(your_data)
View(general_data)
colnames(your_data) <- "AUDIT"
general_data <- data %>%
full_join(your_data)
View(data)
View(your_data)
your_outcome <- sum(as.numeric(your_data[[2]]))
colnames(your_data) <- "AUDIT"
colnames(your_outcome) <- "AUDIT"
your_outcome <- matrix(sum(as.numeric(your_data[[2]])))
colnames(your_outcome) <- "AUDIT"
View(your_outcome)
general_data <- data %>%
full_join(your_outcome)
your_outcome <- data.frame(sum(as.numeric(your_data[[2]])))
colnames(your_outcome) <- "AUDIT"
general_data <- data %>%
full_join(your_outcome)
View(general_data)
#' @note Takes all .csv files from the data folder, even if some files do not contain all data
#'          (e.g., participant did not finish the entire task). Only works on .csv type files.
#'
#' @examples
#' data_folder <- getwd()
#' filename <- "audit_outcome.csv"
#' merge_data_files(data_folder, filename)
#'
#'
#' @export
merge_data_files <- function(datawd = "data", filename) {
# read in csv files from data folder
general_data <- read.csv(datawd, "general_data.csv")
userdatawd <- paste(datawd, "/userdata", sep="")
your_data <- read.csv(userdatawd, filename)
#change column names of your data
if (filename == "audit_outcome.csv") {
your_outcome <- data.frame(sum(as.numeric(your_data[[2]])))
colnames(your_outcome) <- "AUDIT"
}
if (filename == "dass_outcome.csv") {
your_outcome <- sum(as.numeric(your_data[[2]]))
colnames(your_outcome) <- "DASS"
}
if (filename == "sdl_outcome.csv") {
your_outcome <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
colnames(your_outcome) <- "SDL_Score"
}
#merge files
general_data <- general_data %>%
full_join(your_outcome)
}
merge_data_files(filename="audit_outcomes.csv")
getwd()
merge_data_files("C:/Users/mrkon/Documents/Experiments_Public_Github/ProjectExplicit/data", "audit_outcome.csv")
library(ProjectExplicit)
rm(list = ls())
library(ProjectExplicit)
merge_data_files(filename="audit_outcome.csv")
getwd()
merge_data_files(datawd="C:/Users/mrkon/Documents/Experiments_Public_Github/ProjectExplicit/data", filename="audit_outcome.csv")
filename="audit_outcome.csv"
paste("data/userdata", filename, ".csv", sep="")
rm(list = ls())
library(ProjectExplicit)
merge_data_files("audit_outcome.csv")
# read in csv files from data folder
general_data <- read.csv("data/general_data.csv")
filename <- paste("data/userdata/", filename, sep="")
filename <- "audit_outcome.csv"
filename <- paste("data/userdata/", filename, sep="")
your_data <- read.csv(filename)
your_outcome <- data.frame(sum(as.numeric(your_data[[2]])))
colnames(your_outcome) <- "AUDIT"
#merge files
general_data <<- general_data %>%
full_join(your_outcome)
#merge files
general_data <- general_data %>%
full_join(your_outcome)
#' @note Takes all .csv files from the data folder, even if some files do not contain all data
#'          (e.g., participant did not finish the entire task). Only works on .csv type files.
#'
#' @examples
#' data_folder <- getwd()
#' filename <- "audit_outcome.csv"
#' merge_data_files(data_folder, filename)
#'
#'
#' @export
merge_data_files <- function(filename) {
# read in csv files from data folder
general_data <- read.csv("data/general_data.csv")
filename <- paste("data/userdata/", filename, sep="")
your_data <- read.csv(filename)
#change column names of your data
if (filename == "audit_outcome.csv") {
your_outcome <<- data.frame(sum(as.numeric(your_data[[2]])))
colnames(your_outcome) <- "AUDIT"
}
if (filename == "dass_outcome.csv") {
your_outcome <<- sum(as.numeric(your_data[[2]]))
colnames(your_outcome) <- "DASS"
}
if (filename == "sdl_outcome.csv") {
your_outcome <<- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
colnames(your_outcome) <- "SDL_Score"
}
#merge files
general_data <<- general_data %>%
full_join(your_outcome)
}
merge_data_files("audit_outcome.csv")
rm(list = ls())
merge_data_files("audit_outcome.csv")
#' @note Takes all .csv files from the data folder, even if some files do not contain all data
#'          (e.g., participant did not finish the entire task). Only works on .csv type files.
#'
#' @examples
#' data_folder <- getwd()
#' filename <- "audit_outcome.csv"
#' merge_data_files(data_folder, filename)
#'
#'
#' @export
merge_data_files <- function(filename) {
# read in csv files from data folder
general_data <- read.csv("data/general_data.csv")
your_data <- read.csv(paste("data/userdata/", filename, sep=""))
#change column names of your data
if (filename == "audit_outcome.csv") {
your_outcome <<- data.frame(sum(as.numeric(your_data[[2]])))
colnames(your_outcome) <- "AUDIT"
}
if (filename == "dass_outcome.csv") {
your_outcome <<- sum(as.numeric(your_data[[2]]))
colnames(your_outcome) <- "DASS"
}
if (filename == "sdl_outcome.csv") {
your_outcome <<- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
colnames(your_outcome) <- "SDL_Score"
}
#merge files
general_data <<- general_data %>%
full_join(your_outcome)
}
merge_data_files("audit_outcome.csv")
#' @note Takes all .csv files from the data folder, even if some files do not contain all data
#'          (e.g., participant did not finish the entire task). Only works on .csv type files.
#'
#' @examples
#' data_folder <- getwd()
#' filename <- "audit_outcome.csv"
#' merge_data_files(data_folder, filename)
#'
#'
#' @export
merge_data_files <- function(filename) {
# read in csv files from data folder
general_data <- read.csv("data/general_data.csv")
your_data <- read.csv(paste("data/userdata/", filename, sep=""))
#change column names of your data
if (filename == "audit_outcome.csv") {
your_outcome <- data.frame(sum(as.numeric(your_data[[2]])))
colnames(your_outcome) <- "AUDIT"
}
if (filename == "dass_outcome.csv") {
your_outcome <- sum(as.numeric(your_data[[2]]))
colnames(your_outcome) <- "DASS"
}
if (filename == "sdl_outcome.csv") {
your_outcome <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
colnames(your_outcome) <- "SDL_Score"
}
#merge files
general_data <- general_data %>%
full_join(your_outcome)
general_data <<- general_data
}
merge_data_files("audit_outcome.csv")
#' @note Takes all .csv files from the data folder, even if some files do not contain all data
#'          (e.g., participant did not finish the entire task). Only works on .csv type files.
#'
#' @examples
#' data_folder <- getwd()
#' filename <- "audit_outcome.csv"
#' merge_data_files(data_folder, filename)
#'
#'
#' @export
merge_data_files <- function(filename) {
# read in csv files from data folder
general_data <- read.csv("data/general_data.csv")
your_data <- read.csv(paste("data/userdata/", filename, sep=""))
#change column names of your data
if (filename == "audit_outcome.csv") {
your_outcome <- data.frame(sum(as.numeric(your_data[[2]])))
colnames(your_outcome) <- "AUDIT"
}
if (filename == "dass_outcome.csv") {
your_outcome <- sum(as.numeric(your_data[[2]]))
colnames(your_outcome) <- "DASS"
}
if (filename == "sdl_outcome.csv") {
your_outcome <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
colnames(your_outcome) <- "SDL_Score"
}
#merge files
general_data <- general_data %>%
full_join(your_outcome)
}
merge_data_files("audit_outcome.csv")
#' @note Takes all .csv files from the data folder, even if some files do not contain all data
#'          (e.g., participant did not finish the entire task). Only works on .csv type files.
#'
#' @examples
#' data_folder <- getwd()
#' filename <- "audit_outcome.csv"
#' merge_data_files(data_folder, filename)
#'
#'
#' @export
merge_data_files <- function(filename) {
# read in csv files from data folder
general_data <- read.csv("data/general_data.csv")
your_data <- read.csv(paste("data/userdata/", filename, sep=""))
#change column names of your data
if (filename == "audit_outcome.csv") {
your_outcome <- data.frame(sum(as.numeric(your_data[[2]])))
colnames(your_outcome) <- "AUDIT"
}
if (filename == "dass_outcome.csv") {
your_outcome <- sum(as.numeric(your_data[[2]]))
colnames(your_outcome) <- "DASS"
}
if (filename == "sdl_outcome.csv") {
your_outcome <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
colnames(your_outcome) <- "SDL_Score"
}
#merge files
general_data <- general_data %>%
full_join(your_outcome)
return(general_data)
}
merge_data_files("audit_outcome.csv")
general_data <- merge_data_files("audit_outcome.csv")
devtools::test()
library(ProjectExplicit)
rm(list = ls())
library(ProjectExplicit)
devtools::test()
system.file()
ProjectExplicit::system.file()
find.package("ProjectExplicit")
devtools::test()
package_directory <- find.package("ProjectExplicit")
filename <- paste(package_directory, "/data/userdata/audit_outcome.csv", sep="")
filename
general_data_original <- read.csv(paste(package_directory, "data/general_data.csv", sep=""))
devtools::test()
rm(list = ls())
library(ProjectExplicit)
devtools::test()
start_App()
library(ProjectExplicit)
library(ProjectExplicit)
library(ProjectExplicit)
library(ProjectExplicit)
