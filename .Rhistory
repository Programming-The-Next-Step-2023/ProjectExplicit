color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
if(file.exists("data/userdata/sdl.outcome.csv")) {
your_data <- read.csv("data/userdata/sdl_outcome.csv")
your_outcome <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
ggplot_sdl <- ggplot_sdl + geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text", x = your_outcome-450, y = 20, label = "Your Score", color = "#E4CCC0", size = 3.5) +
plotly::ggplotly(ggplot_sdl)
} else {
renderText("No data found for Stroop Deadline Task.
Please make sure to finish the task first.
The task can be found under Experiments Menu Tab")
plotly::ggplotly(ggplot_sdl)
}
}
}
rm(list = ls())
start_App()
#' @title Generates an Alcohol Use plot
#' @description
#'  Generates ggplot with AUDIT Questionnaire scores of the general population
#'  and the users own score.
#'
#' @returns A plot for RShiny implementation.
#'
#' @keywords internal
#'
#' @export
build_plot <- function(plot) {
data <- read.csv("data/general_data.csv")
if(plot == "AUDIT") {
your_data <- read.csv("data/userdata/audit_outcome.csv")
your_outcome <- sum(as.numeric(your_data[[2]]))
ggplot_audit <- ggplot(data, aes(x = AUDIT)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text", x = your_outcome-1.5, y = 25, label = "Your Score", color = "#E4CCC0", size = 3.5) +
labs(x = "Score", y = "Count (n)", title = "Alcohol Use") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
plotly::ggplotly(ggplot_audit)
} else if(plot == "DASS") {
your_data <- read.csv("data/userdata/dass_outcome.csv")
your_outcome <- sum(as.numeric(your_data[[2]]))
ggplot_dass <- ggplot(data, aes(x = DASS)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text", x = your_outcome-10.5, y = 20, label = "Your Score", color = "#E4CCC0", size = 3.5) +
labs(x = "Score", y = "Count (n)", title = "Depression, Anxiety and Stress Symptoms") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
plotly::ggplotly(ggplot_dass)
}  else if(plot == "SDL") {
ggplot_sdl <- ggplot(data, aes(x = SDL_score)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
labs(x = "Score", y = "Count (n)", title = "Stroop Deadline Score") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
if(file.exists("data/userdata/sdl.outcome.csv")) {
your_data <- read.csv("data/userdata/sdl_outcome.csv")
your_outcome <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
ggplot_sdl <- ggplot_sdl + geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text", x = your_outcome-450, y = 20, label = "Your Score", color = "#E4CCC0", size = 3.5) +
plotly::ggplotly(ggplot_sdl)
} else {
shiny::renderText("No data found for Stroop Deadline Task.
Please make sure to finish the task first.
The task can be found under Experiments Menu Tab")
plotly::ggplotly(ggplot_sdl)
}
}
}
App_UI <- function() {
ui <- fluidPage(
theme = bslib::bs_theme(
bg = "#1F1D21",
fg = "#ebebec",
secondary = "#bc0031",
primary = "#E4CCC0",
base_font = bslib::font_google("Prompt"),
code_font = bslib::font_google("JetBrains Mono")
),
navbarPage(
"ProjectExplicit", id = "inTabset",
tabPanel("About", value = "about_tab",
fluidRow(column(8, includeMarkdown("inst/about.md")),
column(4, "Note: For the best experience select Stroop Deadline Task.",
br(), br(),
"Digit Span, VMAC and Classic Stroop Task are for fun only.",
style = "margin-top: 80px; color: #E4CCC0"))),
navbarMenu("Experiments",
tabPanel("Classic Stroop", value = "stroop_tab",
fluidRow(column(6, includeMarkdown("inst/stroop.md")),
column(6, actionButton("start_stroop", "Start Experiment"),
align = "center", style = "margin-top: 100px;"))),
tabPanel("Stroop Deadline", value = "sdl_tab",
fluidRow(column(6, includeMarkdown("inst/sdl.md")),
column(6, actionButton("start_sdl", "Start Experiment"),
align = "center", style = "margin-top: 100px;"))),
tabPanel("Digit Span Task", value = "digit_tab",
fluidRow(column(6, includeMarkdown("inst/digit.md")),
column(6, actionButton("start_digit", "Start Experiment"),
align = "center", style = "margin-top: 100px;"))),
tabPanel("VMAC Task", value = "vmac_tab",
fluidRow(column(6, includeMarkdown("inst/vmac.md")),
column(6, actionButton("start_vmac", "Start Experiment"),
align = "center", style = "margin-top: 100px;")))
),
navbarMenu("Questionnaires",
tabPanel("Alcohol Use", value = "audit_tab",
lapply(1:8, function(i) {
build_questionnaire(i, "AUDIT_part1")
}),
lapply(9:10, function(i) {
build_questionnaire(i, "AUDIT_part2")
}),
actionButton("submit_audit", "Submit")),
tabPanel("Depression Symptoms", value = "dass_tab",
lapply(1:21, function(i) {
build_questionnaire(i, "DASS")
}),
actionButton("submit_dass", "Submit"))),
tabPanel("Your Results", value = "results_tab",
"How do you compare to the general population?",
plotlyOutput("AUDIT"),
plotlyOutput("DASS"),
plotlyOutput("SDL"),
plotlyOutput("Stroop"),
plotlyOutput("VMAC"),
plotlyOutput("Digit")),
),
htmlOutput("experiment"),
)
}
App_server <- function(input, output, session) {
## Start Experiments ----
#start the Stroop experiment Action Button:
observeEvent(input$start_stroop, {
output$experiment <- renderUI({
return(includeHTML("inst/Stroop/index.html"))
})
})
#start StroopDeadline Action Button:
observeEvent(input$start_sdl, {
output$experiment <- renderUI({
return(includeHTML("inst/SDL/index.html"))
})
})
#start Digit Span Action button:
observeEvent(input$start_digit, {
output$experiment <- renderUI({
return(includeHTML("inst/Digit_span/index.html"))
})
})
#start VMAC Action button:
observeEvent(input$start_vmac, {
output$experiment <- renderUI({
return(includeHTML("inst/VMAC_final/index.html"))
})
})
## Get Experiment Data ----
#Retrieve Data upon task completion:
observeEvent(input$stroop_results, {
data <- jsonlite::fromJSON(input$stroop_results)
write.csv(data, file = "data/userdata/stroop_outcome.csv")
})
observeEvent(input$sdl_results, {
data <- jsonlite::fromJSON(input$sdl_results)
write.csv(data, file = "data/userdata/sdl_outcome.csv")
})
observeEvent(input$digit_results, {
data <- jsonlite::fromJSON(input$digit_results)
write.csv(data, file = "data/userdata/digit_outcome.csv")
})
observeEvent(input$vmac_results, {
data <- jsonlite::fromJSON(input$vmac_results)
data <- as.matrix(data)
write.csv(data, file = "data/userdata/vmac_outcome.csv")
})
## Save Questionnaire Data ----
#only save once clicked Submit button
observeEvent(input$submit_audit, {
audit_data <- c(
input$AUDIT_Q1, input$AUDIT_Q2, input$AUDIT_Q3, input$AUDIT_Q4, input$AUDIT_Q5,
input$AUDIT_Q6, input$AUDIT_Q7, input$AUDIT_Q8, input$AUDIT_Q9, input$AUDIT_Q10)
audit_outcome <- sum(as.numeric(audit_data[[2]]))
write.csv(audit_data, file = "data/userdata/audit_outcome.csv")
updateTabsetPanel(session, "inTabset",
selected = "results_tab")
})
observeEvent(input$submit_dass, {
dass_data <- c(
input$DASS_Q1, input$DASS_Q2, input$DASS_Q3, input$DASS_Q4, input$DASS_Q5,
input$DASS_Q6, input$DASS_Q7, input$DASS_Q8, input$DASS_Q9, input$DASS_Q10,
input$DASS_Q11, input$DASS_Q12, input$DASS_Q13, input$DASS_Q14,
input$DASS_Q15, input$DASS_Q16, input$DASS_Q17, input$DASS_Q18,
input$DASS_Q19, input$DASS_Q20, input$DASS_Q21)
dass_outcome <- sum(as.numeric(dass_data[[2]]))
write.csv(dass_data, file = "data/userdata/dass_outcome.csv")
updateTabsetPanel(session, "inTabset",
selected = "results_tab")
})
output$AUDIT <- plotly::renderPlotly({
audit_data <- c(
input$AUDIT_Q1, input$AUDIT_Q2, input$AUDIT_Q3, input$AUDIT_Q4, input$AUDIT_Q5,
input$AUDIT_Q6, input$AUDIT_Q7, input$AUDIT_Q8, input$AUDIT_Q9, input$AUDIT_Q10)
build_plot("AUDIT")
})
output$DASS <- plotly::renderPlotly({
build_plot("DASS")
})
output$SDL <- plotly::renderPlotly({
build_plot("SDL")
})
}
start_App <- function() {
shinyApp(ui = App_UI, server = App_server)
}
start_App()
#' @title Generates an Alcohol Use plot
#' @description
#'  Generates ggplot with AUDIT Questionnaire scores of the general population
#'  and the users own score.
#'
#' @returns A plot for RShiny implementation.
#'
#' @keywords internal
#'
#' @export
build_plot <- function(plot) {
data <- read.csv("data/general_data.csv")
if(plot == "AUDIT") {
your_data <- read.csv("data/userdata/audit_outcome.csv")
your_outcome <- sum(as.numeric(your_data[[2]]))
ggplot_audit <- ggplot(data, aes(x = AUDIT)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text", x = your_outcome-1.5, y = 25, label = "Your Score", color = "#E4CCC0", size = 3.5) +
labs(x = "Score", y = "Count (n)", title = "Alcohol Use") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
plotly::ggplotly(ggplot_audit)
} else if(plot == "DASS") {
your_data <- read.csv("data/userdata/dass_outcome.csv")
your_outcome <- sum(as.numeric(your_data[[2]]))
ggplot_dass <- ggplot(data, aes(x = DASS)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text", x = your_outcome-10.5, y = 20, label = "Your Score", color = "#E4CCC0", size = 3.5) +
labs(x = "Score", y = "Count (n)", title = "Depression, Anxiety and Stress Symptoms") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
plotly::ggplotly(ggplot_dass)
}  else if(plot == "SDL") {
ggplot_sdl <- ggplot(data, aes(x = SDL_score)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
labs(x = "Score", y = "Count (n)", title = "Stroop Deadline Score") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
if(file.exists("data/userdata/sdl.outcome.csv")) {
your_data <- read.csv("data/userdata/sdl_outcome.csv")
your_outcome <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
ggplot_sdl <- ggplot_sdl + geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text", x = your_outcome-450, y = 20, label = "Your Score", color = "#E4CCC0", size = 3.5) +
plotly::ggplotly(ggplot_sdl)
} else {
shiny::showNotification("No data found for Stroop Deadline Task.
Please make sure to finish the task first.
The task can be found under Experiments Menu Tab")
plotly::ggplotly(ggplot_sdl)
}
}
}
start_App()
rm(list = ls())
library(ProjectExplicit)
start_App()
build_plot <- function(plot) {
data <- read.csv("data/general_data.csv")
if(plot == "AUDIT") {
ggplot_audit <- ggplot(data, aes(x = AUDIT)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
labs(x = "Score",
y = "Count (n)",
title = "Alcohol Use") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
if (file.exists("data/userdata/audit_outcome.csv")) {
your_data <- read.csv("data/userdata/audit_outcome.csv")
your_outcome <- sum(as.numeric(your_data[[2]]))
ggplot_audit <- ggplot_audit +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text",
x = your_outcome-1.5, y = 25,
label = "Your Score",
color = "#E4CCC0",
size = 3.5)
plotly::ggplotly(ggplot_audit)
} else {
shiny::showNotification(
"No data found for Depression & Anxiety Questionnaire.
Please make sure to finish the Questionnaire first.
The task can be found under Questionnaire Menu Tab.",
duration = 30)
plotly::ggplotly(ggplot_audit)
}
} else if(plot == "DASS") {
ggplot_dass <- ggplot(data, aes(x = DASS)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
labs(x = "Score",
y = "Count (n)",
title = "Depression, Anxiety and Stress Symptoms") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
if (file.exists("data/userdata/dass_outcome.csv")) {
your_data <- read.csv("data/userdata/dass_outcome.csv")
your_outcome <- sum(as.numeric(your_data[[2]]))
ggplot_dass <- ggplot_dass +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text",
x = your_outcome-10.5, y = 20,
label = "Your Score",
color = "#E4CCC0",
size = 3.5)
plotly::ggplotly(ggplot_dass)
} else {
shiny::showNotification(
"No data found for Depression & Anxiety Questionnaire.
Please make sure to finish the Questionnaire first.
The task can be found under Questionnaire Menu Tab.",
duration = 30)
plotly::ggplotly(ggplot_dass)
}
}  else if(plot == "SDL") {
ggplot_sdl <- ggplot(data, aes(x = SDL_score)) +
geom_bar(fill = "#bc0031", na.rm = TRUE) +
labs(x = "Score",
y = "Count (n)",
title = "Stroop Deadline Score") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec"))
if(file.exists("data/userdata/sdl.outcome.csv")) {
your_data <- read.csv("data/userdata/sdl_outcome.csv")
your_outcome <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
ggplot_sdl <- ggplot_sdl +
geom_vline(aes(xintercept=your_outcome), color = "#E4CCC0") +
annotate(geom = "text",
x = your_outcome-450, y = 20,
label = "Your Score",
color = "#E4CCC0",
size = 3.5)
plotly::ggplotly(ggplot_sdl)
} else {
shiny::showNotification(
"No data found for Stroop Deadline Task.
Please make sure to finish the task first.
The task can be found under Experiments Menu Tab",
duration = 30)
plotly::ggplotly(ggplot_sdl)
}
}
}
start_App()
build_regression_plot <- function() {
data <- read.csv("data/general_data.csv")
ggplot(data, aes(SDL_score, AUDIT)) +
geom_point(colour = "#bc0031") +
geom_smooth(method ="lm", colour = "#E4CCC0", fill = "#ebebec") +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec")) +
labs(y = "Alcohol Use Score",
x = "Stroop Deadline Score",
title="Relation between Cognitive Tasks and Mental Health")
}
build_regression_plot()
build_regression_plot <- function() {
data <- read.csv("data/general_data.csv")
if (input$quest == "Alcohol Use"){
yaxis <- data$AUDIT
ylabel <- "Alcohol Use Score"
if (file.exists("data/userdata/audit_outcome.csv")) {
your_data <- read.csv("data/userdata/audit_outcome.csv")
your_outcome_y <- sum(as.numeric(your_data[[2]]))
}
} else if (input$quest == "Depression, Anxiety & Stress") {
yaxis <- data$DASS
ylabel <- "Depression, Anxiety & Stress Score"
if (file.exists("data/userdata/dass_outcome.csv")) {
your_data <- read.csv("data/userdata/dass_outcome.csv")
your_outcome_y <- sum(as.numeric(your_data[[2]]))
}
}
if (input$task == "Stroop Deadline") {
xaxis <- data$SDL_score
xlabel <- "Stroop Deadline Score"
if (file.exists("data/userdata/sdl_outcome.csv")) {
your_data <- read.csv("data/userdata/sdl_outcome.csv")
your_outcome_x <- tail(your_data$adaptive_window[!is.na(your_data$adaptive_window)], 1)
}
}
ggplot <- ggplot(data, aes(xaxis, yaxis)) +
geom_point(colour = "#bc0031") +
geom_smooth(method ="lm", colour = "#E4CCC0", fill = "#ebebec", na.rm = TRUE) +
theme(panel.background = element_rect(fill ="#1F1D21",
colour = "#1F1D21"),
panel.grid = element_blank(),
plot.background = element_rect(fill = "#1F1D21"),
plot.title = element_text(size=14,
color="#ebebec"),
axis.title = element_text(color="#ebebec"),
axis.text = element_text(color="#ebebec"),
axis.line = element_line(color = "#ebebec"),
axis.ticks = element_line(colour = "#ebebec")) +
labs(y = ylabel,
x = xlabel,
title="Relation Between Cognitive Tasks and Mental Health")
if (exists(your_outcome_x & exists(your_outcome_y))) {
ggplot <- ggplot +
geom_point(aes(x=your_outcome_x,y=your_outcome_y),colour="#E4CCC0") +
annotate(geom = "text",
x = your_outcome_x, y = your_outcome_y,
label = "Your Score",
color = "#E4CCC0",
size = 3.5)
}
plotly::ggplotly(ggplot)
}
build_regression_plot()
rm(list = ls())
